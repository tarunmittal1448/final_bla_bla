const JsonWebTokenError = require('./lib/JsonWebTokenError');
const TokenExpiredError = require('./lib/TokenExpiredError');
const decode = require('./decode');
const jws = require('jws');
const { createPublicKey } = require("crypto");

module.exports = function (jwtString, secretOrPublicKey, options, callback) {
    if ((typeof options === 'function') && !callback) {
        callback = options;
        options = {};
    }

    if (!options) {
        options = {};
    }

    // Clone the options object to avoid mutation
    options = Object.assign({}, options);

    let done;

    if (callback) {
        done = callback;
    } else {
        done = function (err, data) {
            if (err) throw err;
            return data;
        };
    }

    if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {
        return done(new JsonWebTokenError('clockTimestamp must be a number'));
    }

    const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);

    if (!jwtString) {
        return done(new JsonWebTokenError('jwt must be provided'));
    }

    if (typeof jwtString !== 'string') {
        return done(new JsonWebTokenError('jwt must be a string'));
    }

    const parts = jwtString.split('.');

    if (parts.length !== 3) {
        return done(new JsonWebTokenError('jwt malformed'));
    }

    let decodedToken;

    try {
        decodedToken = decode(jwtString, { complete: true });
    } catch (err) {
        return done(err);
    }

    if (!decodedToken) {
        return done(new JsonWebTokenError('invalid token'));
    }

    const payload = decodedToken.payload;

    // Log the expiration time for debugging
    console.log('Token Expiry:', new Date(payload.exp * 1000));

    // Verify token expiration
    if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {
        if (typeof payload.exp !== 'number') {
            return done(new JsonWebTokenError('invalid exp value'));
        }
        if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
            console.log('Token Expired At:', new Date(payload.exp * 1000)); // Log the actual expiry time
            return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));
        }
    }

    // Verify the signature if needed (skipping this for simplicity)

    // If everything is valid, return the payload or a custom result
    return done(null, payload);
};
